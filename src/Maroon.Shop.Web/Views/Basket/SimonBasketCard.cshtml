@model BasketItemModel

<!-- Main container for the Basket Card view -->
<div id="basket-item-row-@Model.BasketItemId" class="row align-items-center mb-2">

    <!-- Product Name -->
    <span class="col-8">@Model.ProductName</span>

    <!-- Quantity controls -->
    <div class="col-2">
        <div class="d-flex align-items-center">
            <!-- Decrease Quantity button -->
            <button id="decrement-btn-@Model.BasketItemId" type="button" class="btn btn-danger btn-sm" aria-label="Decrease quantity" onclick="UpdateQuantity(@Model.BasketItemId, -1)"> - </button>

            <!-- Quantity Value Text -->
            <input id="quantity-@Model.BasketItemId" asp-for="Quantity" type="text" class="form-control text-center" value="@Model.Quantity" readonly />

            <!-- Increase Quantity button -->
            <button id="increment-btn-@Model.BasketItemId" type="button" class="btn btn-success btn-sm" aria-label="Increase quantity" onclick="UpdateQuantity(@Model.BasketItemId, 1)"> + </button>
        </div>
    </div>

    <!-- Total Price and Remove Button -->
    <div class="col-2 d-flex justify-content-end align-items-center">
        <!-- Total Price display -->
        <span id="total-price-@Model.BasketItemId" class="text-body-secondary me-3">@($"{Model.TotalPrice:C}")</span>

        <!-- Remove from Basket button -->
        <button type="button" class="btn btn-light btn-sm" style="width: 100px;" aria-label="Remove from Basket" onclick="RemoveBasketItem(@Model.BasketItemId)"> 🗑️ Remove </button>
    </div>

    <!-- Horizontal Rule / Line -->
    <hr style="margin-top: 15px;" />
</div>


<!-- JavaScript for Updating and Removing Basket Items -->
<script>
    // Attempts to Update the selected Quantity of the Basket Item.
    // Increases or decreases the Quantity by the given change value.
    // Saves the new value in the database and recalculates the total Price for the entire Basket.
    // Response contains the updated Basket Item Total and Total for the entire Basket.
    // param {number} basketItemId - The unique Id of the Basket Item to update.
    // param {number} quantityChange - The change in quantity (positive to increase, negative to decrease).
    function UpdateQuantity(basketItemId, quantityChange) 
    {
        // Get the quantity input element by its Id.
        var quantityElement = document.getElementById('quantity-' + basketItemId);
        // Parse the current quantity value.
        var currentQuantity = parseInt(quantityElement.value);
        // Calculate the new quantity based on the quantityChange.
        var newQuantity = currentQuantity + quantityChange;

        // Ensure the quantity doesn't go below 1 (no negative or zero values).
        if (newQuantity >= 1) 
        {
            // Update the UI with the new quantity
            quantityElement.value = newQuantity;

            // Make an AJAX request to update the quantity on the server.
            $.ajax({
                url: '/Basket/UpdateBasketItemQuantity', // Server-side URL to handle updating the Quantity.
                type: 'POST',
                data: { basketItemId: basketItemId, quantity: newQuantity }, // Data sent to the server.
                success: function (response) 
                {
                    // Update the Total Price for the given Basket Item.
                    var totalPriceElement = document.getElementById('total-price-' + basketItemId);
                    totalPriceElement.textContent = '£' + response.totalPrice.toFixed(2);

                    // Update the Total Price for the entire Basket.
                    var basketTotalPriceElement = document.getElementById('basket-total-price');
                    basketTotalPriceElement.textContent = 'Total: £' + response.basketTotalPrice.toFixed(2);

                    // Update the Basket Item count on the layout button.
                    UpdateBasketItemCount();
                },
                error: function (xhr, status, error) 
                {
                    // Handle any errors that occur during the request.
                    console.error('Error updating quantity: ' + error);
                }
            });
        }
    }

     // Attempts to Delete the selectedBasket Item.
     // Deletes the BasketItem record in the database and recalculates the total Price for the entire Basket.
     // Response contains the new Total for the entire Basket.
     // param {number} basketItemId - The unique Id of the Basket Item to delete.
    function RemoveBasketItem(basketItemId) 
    {
        // Make an AJAX request to Delete the Basket Item on the server.
        $.ajax({
            url: '/Basket/RemoveBasketItem', // Server-side URL to handle updating Removing the Basket.
            type: 'POST',
            data: { basketItemId: basketItemId }, // Data sent to the server.
            success: function (response) {
                if (response.success)
                {
                    // Remove the Basket Item Row from the View.
                    var basketItemRow = document.getElementById('basket-item-row-' + basketItemId);
                    if (basketItemRow) {
                        basketItemRow.remove();
                    }

                    // Update the Total Price for the entire Basket.
                    var basketTotalPriceElement = document.getElementById('basket-total-price');
                    basketTotalPriceElement.textContent = 'Total: £' + response.basketTotalPrice.toFixed(2);

                    // Update the Basket Item count on the layout button.
                    UpdateBasketItemCount();
                }
            },
            error: function (xhr, status, error)
            {
                // Handle any errors that occur during the request.
                console.error('Error removing basket item: ' + error);
            }
        });
    }

    // Attempts to get the current Basket Item count.
    function UpdateBasketItemCount() 
    {
        $.ajax({
            url: '/Basket/GetBasketItemCount', // Server-side URL to handle getting the Basket Item Count.
            type: 'GET',
            success: function (response) {
                // Update the Basket button with the new Basket Item Count.
                var basketCountElement = document.getElementById('basket-count');
                basketCountElement.textContent = '🛒 Basket (' + response.basketCount + ')';
            },
            error: function (xhr, status, error) {
                // Handle any errors that occur during the request.
                console.error('Error updating basket count: ' + error);
            }
        });
    }
</script>