// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Maroon.Shop.Api.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class UpdateAddressRequest : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The addressId property</summary>
        public long? AddressId { get; set; }
        /// <summary>The country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The county property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? County { get; set; }
#nullable restore
#else
        public string County { get; set; }
#endif
        /// <summary>The line1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Line1 { get; set; }
#nullable restore
#else
        public string Line1 { get; set; }
#endif
        /// <summary>The line2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Line2 { get; set; }
#nullable restore
#else
        public string Line2 { get; set; }
#endif
        /// <summary>The nameOfRecipient property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameOfRecipient { get; set; }
#nullable restore
#else
        public string NameOfRecipient { get; set; }
#endif
        /// <summary>The postCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostCode { get; set; }
#nullable restore
#else
        public string PostCode { get; set; }
#endif
        /// <summary>The town property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Town { get; set; }
#nullable restore
#else
        public string Town { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Maroon.Shop.Api.Client.Models.UpdateAddressRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Maroon.Shop.Api.Client.Models.UpdateAddressRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Maroon.Shop.Api.Client.Models.UpdateAddressRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "addressId", n => { AddressId = n.GetLongValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "county", n => { County = n.GetStringValue(); } },
                { "line1", n => { Line1 = n.GetStringValue(); } },
                { "line2", n => { Line2 = n.GetStringValue(); } },
                { "nameOfRecipient", n => { NameOfRecipient = n.GetStringValue(); } },
                { "postCode", n => { PostCode = n.GetStringValue(); } },
                { "town", n => { Town = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("addressId", AddressId);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("county", County);
            writer.WriteStringValue("line1", Line1);
            writer.WriteStringValue("line2", Line2);
            writer.WriteStringValue("nameOfRecipient", NameOfRecipient);
            writer.WriteStringValue("postCode", PostCode);
            writer.WriteStringValue("town", Town);
        }
    }
}
#pragma warning restore CS0618
